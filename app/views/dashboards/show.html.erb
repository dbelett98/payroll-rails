<div class="dashboard-wrapper">
  <!-- Enhanced Client Selection Bar -->
  <div class="client-bar">
    <%= form_with url: dashboard_path, method: :get, local: true, class: "client-form" do |f| %>
      <%= f.select :client_id, 
          options_for_select(@clients.map { |c| [c.name, c.id] }, @selected_client&.id),
          { prompt: "Select Client" },
          { class: "client-select", onchange: "this.form.submit();" } %>
    <% end %>
    
    <div style="display: flex; gap: 1rem;">
      <button id="manage-clients-btn" class="btn btn-primary">
        <span class="btn-icon">üè¢</span> Manage Clients
      </button>

      
    <% if @selected_client %>
      <%# <%= link_to import_form_employees_path(client_id: @selected_client.id), class: 'btn btn-success' do %>
      <%# <span class="btn-icon">üìä</span> Import Employees %>
      <%# <% end %>
    <% end %>
    

      <%= link_to new_employee_path(client_id: @selected_client&.id), class: 'btn btn-primary' do %>
        <span class="btn-icon">+</span> Add New Employee
      <% end %>
    </div>
  </div>

  <!-- Enhanced Main Dashboard Grid -->
  <div class="dashboard-grid">
    <!-- Client Overview -->
    <div class="card card-overview">
      <div class="card-header">
        <span class="card-icon">üìä</span>
        <h2>Client Overview</h2>
      </div>
      <div class="card-body">
        <div class="overview-stats">
          <div class="stat-item">
            <span class="stat-label">Total Employees</span>
            <span class="stat-value"><%= @selected_client&.employees&.count || 0 %></span>
          </div>
          <div class="stat-item">
            <span class="stat-label">Active</span>
            <span class="stat-value"><%= @selected_client&.employees&.where(status: 'active')&.count || 0 %></span>
          </div>
          <div class="stat-item">
            <span class="stat-label">Total Payroll</span>
            <span class="stat-value">$<%= number_with_delimiter((@selected_client&.employees&.sum(&:calculate_pay) || 0).round(2)) %></span>
          </div>
        </div>
        <p class="overview-description">Comprehensive client analytics and employee insights</p>
      </div>
    </div>

    <!-- Payroll Status -->
    <div class="card card-status">
      <div class="card-header">
        <span class="card-icon">üí∞</span>
        <h2>Payroll Status</h2>
      </div>
      <div class="card-body">
        <div class="status-indicator">
          <span class="status-badge status-active">Active</span>
          <span class="status-text">Next payroll: <%= (Date.today + 7.days).strftime("%B %d, %Y") %></span>
        </div>
        <p class="status-description">Real-time payroll processing updates and status monitoring</p>
      </div>
    </div>

    <!-- Reports -->
    <div class="card card-reports">
      <div class="card-header">
        <span class="card-icon">üìà</span>
        <h2>Reports</h2>
      </div>
      <div class="card-body">
        <div class="report-links">
          <a href="#" class="report-link">Payroll Register</a>
          <a href="#" class="report-link">Tax Summary</a>
          <a href="#" class="report-link">YTD Earnings</a>
        </div>
        <p class="reports-description">Advanced reporting and data insights for informed decisions</p>
      </div>
    </div>
  </div>

  <!-- Enhanced Employee Directory with AJAX Updates -->
  <div class="employee-section" id="employee-directory">
    <div class="section-header">
      <h2 class="section-title" id="employee-section-title">
        <span class="section-icon">üë•</span>
        Employee Directory
        <% if @has_filters %>
          <span class="filter-indicator" id="filter-indicator">
            (Filtered: <%= @employees.count %> of <%= @selected_client&.employees&.count || 0 %>)
          </span>
        <% end %>
      </h2>
    </div>

    <!-- AJAX-Enabled Filter Bar -->
    <div id="employee-filter-container">
      <%= render 'employee_filter_bar', 
          selected_client: @selected_client,
          current_search: @current_search,
          current_status: @current_status,
          has_filters: @has_filters,
          employees: @employees %>
    </div>
    
    <!-- AJAX-Updated Employee Table -->
    <div id="employees-table-container">
      <%= render 'employees_table', 
          employees: @employees, 
          selected_client: @selected_client,
          has_filters: @has_filters %>
    </div>
  </div>
</div>

<!-- Client Management Modal (Keep unchanged) -->
<div id="client-modal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <h3 id="client-modal-title">Manage Clients</h3>
      <span class="modal-close" onclick="closeClientModal()">&times;</span>
    </div>
    <div class="modal-body">
      <!-- Client List -->
      <div id="client-list" class="client-list">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
          <h4>Your Clients</h4>
          <button type="button" class="btn btn-primary" onclick="showClientForm()">
            <span class="btn-icon">+</span> Add Client
          </button>
        </div>
        
        <div class="clients-table">
          <% @clients.each do |client| %>
            <div class="client-row">
              <div class="client-info">
                <div class="client-name"><%= client.name %></div>
                <div class="client-details">
                  <%= client.employees.count %> employees ‚Ä¢ 
                  <% if client.email.present? %><%= client.email %><% else %>No email<% end %>
                </div>
              </div>
              <div class="client-actions">
                <button class="btn-edit" onclick="editClient(<%= client.id %>, '<%= client.name %>', '<%= client.bank_account %>', '<%= client.ein %>', '<%= client.address %>', '<%= client.phone %>', '<%= client.email %>')">Edit</button>
                <% if @clients.count > 1 %>
                  <%= button_to "Delete", client_path(client), method: :delete, 
                      data: { confirm: "Are you sure? This will delete all employees for this client." }, 
                      class: "btn-delete", form: { style: "display: inline;" } %>
                <% end %>
              </div>
            </div>
          <% end %>
        </div>
      </div>

      <!-- Client Form -->
      <div id="client-form" class="client-form" style="display: none;">
        <form id="client-form-element" action="/clients" method="post">
          <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
          <input type="hidden" id="client-id" name="client_id" value="">
          <input type="hidden" id="client-form-method" name="_method" value="post">
          
          <div class="form-group">
            <label class="form-label">Company Name</label>
            <input type="text" id="client-name" name="client[name]" placeholder="Enter company name" class="form-input" required>
          </div>
          
          <div class="form-row">
            <div class="form-group">
              <label class="form-label">EIN <span style="font-size: 0.8em; color: #6b7280;">(Format: XX-XXXXXXX)</span></label>
              <input type="text" id="client-ein" name="client[ein]" placeholder="12-3456789" class="form-input" maxlength="10" data-mask="ein">
            </div>
            
            <div class="form-group">
              <label class="form-label">Phone <span style="font-size: 0.8em; color: #6b7280;">(Format: (XXX) XXX-XXXX)</span></label>
              <input type="text" id="client-phone" name="client[phone]" placeholder="(555) 123-4567" class="form-input" maxlength="14" data-mask="phone">
            </div>
          </div>
          
          <div class="form-row">
            <div class="form-group">
              <label class="form-label">Email</label>
              <input type="email" id="client-email" name="client[email]" placeholder="contact@company.com" class="form-input">
            </div>
            
            <div class="form-group">
              <label class="form-label">Bank Account</label>
              <input type="text" id="client-bank" name="client[bank_account]" placeholder="Account ending in XXXX" class="form-input">
            </div>
          </div>
          
          <div class="form-group">
            <label class="form-label">Address</label>
            <textarea id="client-address" name="client[address]" placeholder="123 Business St, City, State 12345" class="form-input" rows="3"></textarea>
          </div>
          
          <div class="form-actions">
            <button type="button" class="btn btn-cancel" onclick="showClientList()">Cancel</button>
            <button type="submit" class="btn btn-primary" id="client-submit-btn">Add Client</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<style>
  /* Employee Filter Bar Styles */
  .employee-filter-bar {
    background: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }
  
  .filter-row {
    display: flex;
    gap: 1rem;
    align-items: end;
    flex-wrap: wrap;
  }
  
  .search-group {
    flex: 2;
    min-width: 250px;
  }
  
  .filter-group {
    flex: 1;
    min-width: 150px;
  }
  
  .action-group {
    flex: 0;
    display: flex;
    gap: 0.5rem;
  }
  
  .search-input {
    width: 100%;
    padding: 0.75rem 1rem;
    border: 2px solid #e2e8f0;
    border-radius: 8px;
    font-size: 1rem;
    transition: border-color 0.3s ease;
  }
  
  .search-input:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
  }
  
  .filter-select {
    width: 100%;
    padding: 0.75rem 1rem;
    border: 2px solid #e2e8f0;
    border-radius: 8px;
    background: white;
    font-size: 1rem;
    cursor: pointer;
    transition: border-color 0.3s ease;
  }
  
  .filter-select:focus {
    outline: none;
    border-color: #667eea;
  }
  
  .btn-filter {
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    font-size: 1rem;
    white-space: nowrap;
  }
  
  .btn-clear {
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    font-size: 1rem;
    white-space: nowrap;
    background: #f3f4f6;
    color: #4b5563;
    border: 2px solid #e5e7eb;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .btn-clear:hover {
    background: #e5e7eb;
    color: #374151;
  }
  
  .filter-indicator {
    font-size: 0.9rem;
    color: #667eea;
    font-weight: normal;
    margin-left: 0.5rem;
  }
  
  .empty-state-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
    margin-top: 1rem;
    flex-wrap: wrap;
  }

  /* AJAX Loading Styles */
  .filter-loading {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    padding: 1rem;
    background: #f0f9ff;
    border: 1px solid #bae6fd;
    border-radius: 8px;
    margin-bottom: 1rem;
    color: #0369a1;
    font-size: 0.95rem;
  }
  
  .loading-spinner {
    width: 16px;
    height: 16px;
    border: 2px solid #bae6fd;
    border-top: 2px solid #0369a1;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  /* Smooth updates */
  #employees-table-container {
    transition: opacity 0.3s ease;
  }
  
  #employees-table-container.updating {
    opacity: 0.6;
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .filter-row {
      flex-direction: column;
      align-items: stretch;
    }
    
    .search-group,
    .filter-group {
      min-width: auto;
    }
    
    .action-group {
      justify-content: stretch;
    }
    
    .btn-filter,
    .btn-clear {
      flex: 1;
    }
    
    .empty-state-actions {
      flex-direction: column;
      align-items: center;
    }
    
    .empty-state-actions .btn {
      width: 100%;
      max-width: 300px;
    }
  }

  /* Keep all existing styles from original file */
  .enhanced-modal {
    max-width: 700px;
    max-height: 90vh;
    overflow-y: auto;
  }
  
  .client-list {
    max-height: 400px;
    overflow-y: auto;
  }
  
  .clients-table {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }
  
  .client-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    background: #f9fafb;
    border-radius: 8px;
    border: 1px solid #e5e7eb;
  }
  
  .client-info {
    flex: 1;
  }
  
  .client-name {
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 0.25rem;
  }
  
  .client-details {
    font-size: 0.875rem;
    color: #6b7280;
  }
  
  .client-actions {
    display: flex;
    gap: 0.5rem;
  }
  
  .client-form {
    animation: slideIn 0.3s ease;
  }
  
  .employee-name-link {
    color: #3182ce;
    text-decoration: none;
    font-weight: 600;
  }
  
  .employee-name-link:hover {
    color: #2c5aa0;
    text-decoration: underline;
  }

  /* Fix for link buttons */
  a.btn-edit,
  a.btn-primary {
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    text-align: center;
  }

  a.btn-edit {
    padding: 0.375rem 0.75rem;
    border-radius: 6px;
    font-size: 0.875rem;
    background: #10b981;
    color: white;
    transition: all 0.3s ease;
  }

  a.btn-edit:hover {
    background: #059669;
    transform: translateY(-1px);
  }

  .action-btn.primary-btn {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    text-decoration: none;
  }

  .action-btn.primary-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
  }
</style>

<script>
// AJAX Employee Filtering System
document.addEventListener('DOMContentLoaded', function() {
  console.log('üöÄ AJAX Employee Filtering System Initialized');
  
  // Handle form submission via AJAX
  function handleEmployeeFilter(e) {
    if (e) e.preventDefault();
    
    const form = document.getElementById('employee-filter-form');
    if (!form) return;
    
    const formData = new FormData(form);
    const params = new URLSearchParams(formData);
    
    console.log('üîç Filtering with params:', params.toString());
    
    // Show loading state
    showLoadingState();
    
    // Make AJAX request
    fetch(`${form.action}?${params}`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      }
    })
    .then(response => response.json())
    .then(data => {
      console.log('‚úÖ Filter response received:', data);
      updateEmployeeDirectory(data);
    })
    .catch(error => {
      console.error('‚ùå Filter error:', error);
      hideLoadingState();
    });
  }
  
  // Clear filters function
  function clearEmployeeFilters() {
    const clientId = document.querySelector('input[name="client_id"]')?.value;
    
    console.log('üóëÔ∏è Clearing filters for client:', clientId);
    
    showLoadingState();
    
    fetch(`/dashboard?client_id=${clientId}`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      }
    })
    .then(response => response.json())
    .then(data => {
      console.log('‚úÖ Clear response received:', data);
      updateEmployeeDirectory(data);
    })
    .catch(error => {
      console.error('‚ùå Clear error:', error);
      hideLoadingState();
    });
  }
  
  // Show loading state
  function showLoadingState() {
    const loading = document.getElementById('filter-loading');
    const tableContainer = document.getElementById('employees-table-container');
    
    if (loading) loading.style.display = 'flex';
    if (tableContainer) tableContainer.classList.add('updating');
  }
  
  // Hide loading state
  function hideLoadingState() {
    const loading = document.getElementById('filter-loading');
    const tableContainer = document.getElementById('employees-table-container');
    
    if (loading) loading.style.display = 'none';
    if (tableContainer) tableContainer.classList.remove('updating');
  }
  
  // Update the employee directory with new data
  function updateEmployeeDirectory(data) {
    // Update filter bar
    const filterContainer = document.getElementById('employee-filter-container');
    if (filterContainer && data.filter_bar_html) {
      filterContainer.innerHTML = data.filter_bar_html;
      attachFilterHandlers(); // Reattach event handlers
    }
    
    // Update table
    const tableContainer = document.getElementById('employees-table-container');
    if (tableContainer && data.employees_html) {
      tableContainer.innerHTML = data.employees_html;
      attachClearHandlers(); // Reattach clear button handlers in empty state
    }
    
    // Update section title filter indicator
    const title = document.getElementById('employee-section-title');
    if (title) {
      const filterIndicator = title.querySelector('.filter-indicator');
      if (data.has_filters && data.employee_count !== undefined) {
        const indicatorText = `(Filtered: ${data.employee_count} of ${data.total_count})`;
        if (filterIndicator) {
          filterIndicator.textContent = indicatorText;
        } else {
          title.innerHTML += `<span class="filter-indicator">${indicatorText}</span>`;
        }
      } else {
        if (filterIndicator) {
          filterIndicator.remove();
        }
      }
    }
    
    hideLoadingState();
    console.log('üéØ Employee directory updated successfully');
  }
  
  // Attach event handlers to filter form
  function attachFilterHandlers() {
    const form = document.getElementById('employee-filter-form');
    const clearBtn = document.getElementById('clear-filters-btn');
    
    if (form) {
      form.addEventListener('submit', handleEmployeeFilter);
      console.log('üîó Filter form handler attached');
    }
    
    if (clearBtn) {
      clearBtn.addEventListener('click', clearEmployeeFilters);
      console.log('üîó Clear button handler attached');
    }
  }
  
  // Attach event handlers to clear buttons in empty state
  function attachClearHandlers() {
    const clearEmptyBtn = document.getElementById('clear-filters-empty');
    if (clearEmptyBtn) {
      clearEmptyBtn.addEventListener('click', clearEmployeeFilters);
      console.log('üîó Empty state clear button handler attached');
    }
  }
  
  // Initial attachment
  attachFilterHandlers();
  attachClearHandlers();
});

// Client Management JavaScript (Keep unchanged)
document.getElementById('manage-clients-btn').onclick = function() {
  document.getElementById('client-modal').style.display = 'block';
  showClientList();
}

function closeClientModal() {
  document.getElementById('client-modal').style.display = 'none';
}

function showClientList() {
  document.getElementById('client-list').style.display = 'block';
  document.getElementById('client-form').style.display = 'none';
  document.getElementById('client-modal-title').textContent = 'Manage Clients';
}

function setupInputMasking() {
  // EIN Masking: XX-XXXXXXX
  const einInput = document.getElementById('client-ein');
  if (einInput) {
    einInput.addEventListener('input', function(e) {
      let value = e.target.value.replace(/\D/g, ''); // Remove non-digits
      if (value.length >= 2) {
        value = value.substring(0, 2) + '-' + value.substring(2, 9);
      }
      e.target.value = value;
    });
  }
  
  // Phone Masking: (XXX) XXX-XXXX
  const phoneInput = document.getElementById('client-phone');
  if (phoneInput) {
    phoneInput.addEventListener('input', function(e) {
      let value = e.target.value.replace(/\D/g, ''); // Remove non-digits
      if (value.length > 0) {
        if (value.length <= 3) {
          value = `(${value}`;
        } else if (value.length <= 6) {
          value = `(${value.substring(0, 3)}) ${value.substring(3)}`;
        } else {
          value = `(${value.substring(0, 3)}) ${value.substring(3, 6)}-${value.substring(6, 10)}`;
        }
      }
      e.target.value = value;
    });
  }
}

function showClientForm() {
  document.getElementById('client-list').style.display = 'none';
  document.getElementById('client-form').style.display = 'block';
  document.getElementById('client-modal-title').textContent = 'Add New Client';
  
  const form = document.getElementById('client-form-element');
  form.action = '/clients';
  document.getElementById('client-form-method').value = 'post';
  document.getElementById('client-submit-btn').textContent = 'Add Client';
  form.reset();
  
  setupInputMasking();
}

function editClient(id, name, bankAccount, ein, address, phone, email) {
  showClientForm();
  document.getElementById('client-modal-title').textContent = 'Edit Client';
  
  const form = document.getElementById('client-form-element');
  form.action = '/clients/' + id;
  document.getElementById('client-form-method').value = 'patch';
  document.getElementById('client-submit-btn').textContent = 'Update Client';
  
  document.getElementById('client-id').value = id;
  document.getElementById('client-name').value = name;
  document.getElementById('client-bank').value = bankAccount || '';
  document.getElementById('client-ein').value = ein || '';
  document.getElementById('client-address').value = address || '';
  document.getElementById('client-phone').value = phone || '';
  document.getElementById('client-email').value = email || '';
  
  setupInputMasking();
}

// Close client modal when clicking outside
window.onclick = function(event) {
  const clientModal = document.getElementById('client-modal');
  if (event.target == clientModal) {
    closeClientModal();
  }
}
</script>